import os
import hashlib
import requests
import json
import time
from datetime import datetime
from dotenv import load_dotenv
import subprocess

# Carrega vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes do Telegram
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# URLs dos sites
URLS = {
    "C√¢mara de SJC": os.getenv("URL1"),
    "Prefeitura de Ca√ßapava": os.getenv("URL2"),
}

HASH_FILE = "hashes.json"

# üîπ Fun√ß√£o para enviar mensagem no Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message}
    try:
        requests.post(url, data=data)
    except Exception as e:
        print(f"Erro ao enviar mensagem ao Telegram: {e}")

# üîπ Calcula hash do conte√∫do
def get_hash(content):
    return hashlib.sha256(content.encode("utf-8")).hexdigest()

# üîπ Verifica os sites e detecta mudan√ßas
def check_sites():
    print("üöÄ Iniciando monitoramento di√°rio dos sites...\n")
    send_telegram_message("üöÄ Iniciando monitoramento di√°rio dos sites de concursos...")

    # Carrega hashes antigos
    if os.path.exists(HASH_FILE):
        with open(HASH_FILE, "r") as f:
            hashes = json.load(f)
    else:
        hashes = {}

    for name, url in URLS.items():
        print(f"üåê Verificando {name} ‚Üí {url}")
        try:
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            new_hash = get_hash(response.text)

            old_hash = hashes.get(name)
            if old_hash and old_hash != new_hash:
                msg = f"‚ö†Ô∏è Mudan√ßa detectada em {name}!\nüîó {url}"
                send_telegram_message(msg)
                print(msg)
            elif not old_hash:
                print(f"üìÑ Criado hash inicial para {name}.")
            else:
                print(f"‚úÖ Nenhuma altera√ß√£o detectada em {name}.")

            hashes[name] = new_hash

        except Exception as e:
            print(f"‚ùå Erro ao verificar {name}: {e}")
            send_telegram_message(f"‚ùå Erro ao verificar {name}: {e}")

    with open(HASH_FILE, "w") as f:
        json.dump(hashes, f, indent=4)

    print("\nüíæ Hashes atualizados e salvos localmente.")

    # üîÅ Faz commit e push
    try:
        subprocess.run(["git", "add", "hashes.json"], check=True)
        subprocess.run(["git", "commit", "-m", "Atualiza√ß√£o autom√°tica de hashes"], check=True)
        subprocess.run(["git", "push"], check=True)
        print("‚úÖ Commit e push conclu√≠dos com sucesso.")
    except Exception as e:
        print(f"‚ö†Ô∏è Falha ao fazer commit/push: {e}")

# üîπ Aguardar at√© 9h da manh√£
def wait_until_9am():
    now = datetime.now()
    target = now.replace(hour=9, minute=0, second=0, microsecond=0)
    if now > target:
        target = target.replace(day=now.day + 1)
    wait_seconds = (target - now).total_seconds()
    print(f"‚è≥ Aguardando at√© {target.strftime('%d/%m %H:%M')} para a pr√≥xima verifica√ß√£o di√°ria...")
    time.sleep(wait_seconds)

if __name__ == "__main__":
    while True:
        check_sites()
        wait_until_9am()
